library(nimble)
## modelCode
midgeCode <- nimbleCode({
for (i in 1:N){
y[i] ~ dnorm(mean = theta, var = sigma2)
}
theta ~ dnorm(mean = 1.9, var = 0.95)
})
## define additional information needed for the model
## Data
midgeData <- list(y = data)
## constants of the model (e.g. number of observations, fixed values)
midgeConsts <- list(N = length(data))
## values to initialize the algorithm
midgeInits <- list(theta = 1,
sigma2 = var(data))
data <- c(1.64,1.7,1.72,1.74,1.82,1.82,1.82,1.9,2.08,1.78,1.86,1.96,1.96,2,2)
## values to initialize the algorithm
midgeInits <- list(theta = 1,
sigma2 = var(data))
## fast use of NIMBLE (one-line invocation)
mcmc.out <- nimbleMCMC(code = midgeCode, constants = midgeConsts,
data = midgeData, inits = midgeInits,
niter = 5000, nburnin = 1000,
monitors = c('theta'))
data <- c(1.64,1.7,1.72,1.74,1.82,1.82,1.82,1.9,2.08,1.78,1.86,1.96,1.96,2,2)
library(nimble)
## modelCode
midgeCode <- nimbleCode({
for (i in 1:N){
y[i] ~ dnorm(mean = theta, var = sigma2)
}
theta ~ dnorm(mean = 1.9, var = 0.95)
})
## define additional information needed for the model
## Data
midgeData <- list(y = data)
## constants of the model (e.g. number of observations, fixed values)
midgeConsts <- list(N = length(data))
## values to initialize the algorithm
midgeInits <- list(theta = 1,
sigma2 = var(data))
## fast use of NIMBLE (one-line invocation)
mcmc.out <- nimbleMCMC(code = midgeCode, constants = midgeConsts,
data = midgeData, inits = midgeInits,
niter = 5000, nburnin = 1000,
monitors = c('theta'))
mcmc.out
mean(mcmc.out)
class(mcmc.out)
setwd("~/Desktop/NIMBLE/code/nimble_Hoff_7.4_Two_Coins")
read.csv('../textbooks/Doing_Bayesian_Data_Analysis/DBDA2Eprograms/z6N8z2N7.csv')
file('../textbooks')
setwd("~/Desktop/NIMBLE/code/nimble_Hoff_7.4_Two_Coins")
read.csv('./../textbooks/Doing_Bayesian_Data_Analysis/DBDA2Eprograms/z6N8z2N7.csv')
read.csv('./../../textbooks/Doing_Bayesian_Data_Analysis/DBDA2Eprograms/z6N8z2N7.csv')
data <- read.csv('./../../textbooks/Doing_Bayesian_Data_Analysis/DBDA2Eprograms/z6N8z2N7.csv')
data
length(data)
nrow(data)
data$s
unique(data$s)
length(unique(data$s))
dbern(2)
dbern(0.5)
library(nimble)
## modelCode
coinCode <- nimbleCode({
for (i in 1:Ntotal){
y[i] ~ dbinom(size = 1, prob = theta[s[i]])
}
for (s in 1:Nsubj){
theta[s] ~ dbeta(2, 2)
}
})
## define additional information needed for the model
## Data
coinData <- list(y = data)
## constants of the model (e.g. number of observations, fixed values)
coinConsts <- list(Ntotal = nrow(data), Nsubj = length(unique(data$s)))
## values to initialize the algorithm
coinInits <- list(theta = c(0.5, 0.5))
## fast use of NIMBLE (one-line invocation)
mcmc.out <- nimbleMCMC(code = coinCode, constants = coinConsts,
data = coinData, inits = coinInits,
niter = 5000, nburnin = 1000,
monitors = c('theta'))
## define additional information needed for the model
## Data
coinData <- list(y = data$y, s = data$s)
## fast use of NIMBLE (one-line invocation)
mcmc.out <- nimbleMCMC(code = coinCode, constants = coinConsts,
data = coinData, inits = coinInits,
niter = 5000, nburnin = 1000,
monitors = c('theta'))
class(data$y)
class(data$s)
as.numeric(data$s)
## define additional information needed for the model
## Data
coinData <- list(y = data$y, s = as.numeric(data$s))
## fast use of NIMBLE (one-line invocation)
mcmc.out <- nimbleMCMC(code = coinCode, constants = coinConsts,
data = coinData, inits = coinInits,
niter = 5000, nburnin = 1000,
monitors = c('theta'))
data <- read.csv('./../../textbooks/Doing_Bayesian_Data_Analysis/DBDA2Eprograms/z6N8z2N7.csv')
data
library(nimble)
## modelCode
coinCode <- nimbleCode({
for (i in 1:Ntotal){
y[i] ~ dbinom(size = 1, prob = theta[s[i]])
}
for (s in 1:Nsubj){
theta[s] ~ dbeta(2, 2)
}
})
## define additional information needed for the model
## Data
coinData <- list(y = data$y, s = as.numeric(data$s))
## constants of the model (e.g. number of observations, fixed values)
coinConsts <- list(Ntotal = nrow(data), Nsubj = length(unique(data$s)))
## values to initialize the algorithm
coinInits <- list(theta = c(0.5, 0.5))
## fast use of NIMBLE (one-line invocation)
mcmc.out <- nimbleMCMC(code = coinCode, constants = coinConsts,
data = coinData, inits = coinInits,
niter = 5000, nburnin = 1000,
monitors = c('theta'))
mcmc.out
mcmc.out
mcmc.out[, 1]
hist(mcmc.out[, 1])
hist(mcmc.out[, 1]) , breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta1 posterior samples")
hist(mcmc.out[, 1], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta1 posterior samples")
hist(mcmc.out[, 2], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta1 posterior samples")
hist(mcmc.out[, 2], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta2 posterior samples")
mcmc.out[, 1]
hist(mcmc.out[, 1], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta1 posterior samples")
hist(mcmc.out[, 2], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta2 posterior samples")
# add posterior density (computed analytically)
ys<-seq(1.7, 2,length=500)
lines(ys, dnorm(ys, mun,sqrt(t2n)), col = 2)
par(mfrow=c(2,1))
hist(mcmc.out[, 1], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta1 posterior samples")
hist(mcmc.out[, 2], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta2 posterior samples")
plot(mcmc.out, type = "l", main = "Traceplot")
plot(mcmc.out, type = "p", main = "Traceplot")
lines(cumsum(mcmc.out)/1:length(mcmc.out), col = "gold")
lines(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), col = "gold")
lines(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), col = "gold")
lines(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), col = "gold")
plot.new
lines(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), col = "gold")
lines(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), col = "gold")
plot(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), col = "gold")
plot(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), type = 'l', col = "gold")
plot(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), type = 'l', col = "gold")
plot(cumsum(mcmc.out[,2])/1:length(mcmc.out[,2]), type = 'l', col = "blue")
plot(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), type = 'l', col = "gold")
line(cumsum(mcmc.out[,2])/1:length(mcmc.out[,2]), col = "blue")
par(mfrow = c(1,2))
hist(mcmc.out, breaks = 100, xlim = c(1.7, 2), prob = T, main = "Histogram of theta posterior samples")
# add posterior density (computed analytically)
ys<-seq(1.7, 2,length=500)
lines(ys, dnorm(ys, mun,sqrt(t2n)), col = 2)
plot(mcmc.out[,2], type = "p", main = "Traceplot")
line(cumsum(mcmc.out[,2])/1:length(mcmc.out[,2]), col = "gold")
plot(mcmc.out[,2], type = "l", main = "Traceplot")
line(cumsum(mcmc.out[,2])/1:length(mcmc.out[,2]), col = "gold")
plot(mcmc.out[,2], type = "l", main = "Traceplot")
lines(cumsum(mcmc.out[,2])/1:length(mcmc.out[,2]), col = "gold")
plot(mcmc.out[,2], type = "l", main = "Traceplot of theta2")
lines(cumsum(mcmc.out[,2])/1:length(mcmc.out[,2]), col = "gold")
plot(mcmc.out, type = "l", main = "Traceplot")
plot(mcmc.out, type = "p", main = "Traceplot")
data <- read.csv('./../../textbooks/Doing_Bayesian_Data_Analysis/DBDA2Eprograms/z6N8z2N7.csv')
data
knitr::opts_chunk(eval=FALSE)
knitr::opts_chunk$set(eval=FALSE)
data <- read.csv('./../../textbooks/Doing_Bayesian_Data_Analysis/DBDA2Eprograms/z6N8z2N7.csv')
data
library(nimble)
## modelCode
coinCode <- nimbleCode({
for (i in 1:Nsubj){
theta[i] ~ dbeta(2, 2)    # prior distributions the two parameters
}
for (i in 1:Ntotal){
y[i] ~ dbern(prob = theta[s[i]])    # likelihoods of the outcomes based on the subjects
}
})
## define additional information needed for the model
## data
coinData <- list(y = data$y)
## constants of the model (e.g. number of observations, fixed values)
coinConsts <- list(s = as.numeric(data$s), Ntotal = nrow(data), Nsubj = length(unique(data$s)))
## values to initialize the algorithm
coinInits <- list(theta = c(0.5, 0.5))
coinCode
coinData
coinConsts
## fast use of NIMBLE (one-line invocation)
mcmc.out <- nimbleMCMC(code = coinCode, constants = coinConsts,
data = coinData, inits = coinInits,
niter = 5000, nburnin = 1000,
monitors = c('theta'))
mcmc.out
head(mcmc.out)
dim(mcmc.out)
head(mcmc.out)
class(mcmc.out)
head(mcmc.out)
par(mfrow=c(2,1))
hist(mcmc.out[, 1], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta1 posterior samples")
hist(mcmc.out[, 2], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta2 posterior samples")
par(mfrow=c(1,2))
hist(mcmc.out[, 1], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta1 posterior samples")
hist(mcmc.out[, 2], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta2 posterior samples")
par(mfrow=c(2,1))
hist(mcmc.out[, 1], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta1 posterior samples")
hist(mcmc.out[, 2], breaks = 100, xlim = c(0, 1.2), prob = T, main = "Histogram of theta2 posterior samples")
par(mfrow=c(2,1))
plot(mcmc.out[,1], type = "l", main = "Traceplot of theta1")
lines(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), col = "gold")
plot(mcmc.out[,2], type = "l", main = "Traceplot of theta2")
lines(cumsum(mcmc.out[,2])/1:length(mcmc.out[,2]), col = "gold")
plot(mcmc.out[,1], type = "l", main = "Traceplot of theta1")
lines(cumsum(mcmc.out[,1])/1:length(mcmc.out[,1]), col = "gold")
plot(mcmc.out[,2], type = "l", main = "Traceplot of theta2")
lines(cumsum(mcmc.out[,2])/1:length(mcmc.out[,2]), col = "gold")
data <- read.csv('z6N8z2N7.csv')
data
